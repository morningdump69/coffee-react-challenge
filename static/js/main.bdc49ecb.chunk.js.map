{"version":3,"sources":["components/NameInput.js","components/CurrentOrder.js","components/CoffeeInput.js","components/SizeInput.js","components/CompOrders.js","App.js","serviceWorker.js","index.js"],"names":["NameInput","props","className","placeholder","autoFocus","type","onChange","event","handleNameInput","onKeyDown","key","handleNameSubmit","handleEnter","onClick","CurrentOrder","currentOrder","CoffeeInput","handleCoffeeInput","handleCoffeeSubmit","SizeInput","handleSizeInput","handleSizeSubmit","CompOrders","orders","map","order","index","deleteClass","orderDelete","App","state","currentName","currentSize","currentCoffee","orderNames","showNameInput","showSizeInput","showCoffeeInput","randomNameShow","randomName","endGame","roulette","capName","target","value","toUpperCase","setState","names","newName","push","afterOrder","ordersArray","newOrders","newOrderNames","splice","handleRandomName","randomNameNumGen","Math","floor","random","length","randomNameGen","handleReset","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iRA2BeA,G,WAxBG,SAAAC,GAOhB,OACE,6BACE,2BACEC,UAAU,QACVC,YAAY,kBACZC,WAAS,EACTC,KAAK,OACLC,SAAU,SAAAC,GAAK,OAAIN,EAAMO,gBAAgBD,IACzCE,UAAW,SAAAF,GAAK,OAdJ,SAAAA,GACE,UAAdA,EAAMG,KACRT,EAAMU,mBAYgBC,CAAYL,MAElC,4BAAQL,UAAU,SAASW,QAASZ,EAAMU,kBAA1C,eCVSG,EARM,SAAAb,GACnB,OACE,6BACE,4BAAKA,EAAMc,gBCsBFC,EAxBK,SAAAf,GAOlB,OACE,6BACE,2BACEC,UAAU,QACVC,YAAY,oBACZC,WAAS,EACTC,KAAK,OACLC,SAAU,SAAAC,GAAK,OAAIN,EAAMgB,kBAAkBV,IAC3CE,UAAW,SAAAF,GAAK,OAdJ,SAAAA,GACE,UAAdA,EAAMG,KACRT,EAAMiB,qBAYgBN,CAAYL,MAElC,4BAAQL,UAAU,SAASW,QAASZ,EAAMiB,oBAA1C,gBCOSC,EAxBG,SAAAlB,GAOhB,OACE,6BACE,2BACEC,UAAU,QACVC,YAAY,kBACZC,WAAS,EACTC,KAAK,OACLC,SAAU,SAAAC,GAAK,OAAIN,EAAMmB,gBAAgBb,IACzCE,UAAW,SAAAF,GAAK,OAdJ,SAAAA,GACE,UAAdA,EAAMG,KACRT,EAAMoB,mBAYgBT,CAAYL,MAElC,4BAAQL,UAAU,SAASW,QAASZ,EAAMoB,kBAA1C,cCGSC,EApBI,SAAArB,GACjB,OACE,yBAAKC,UAAU,oBACZD,EAAMsB,OAAOC,KAAI,SAACC,EAAOC,GACxB,OACE,yBAAKxB,UAAU,UACb,4BAAKuB,GACL,4BACEvB,UAAWD,EAAM0B,YACjBd,QAAS,kBAAMZ,EAAM2B,YAAYF,KAFnC,WCqKGG,E,2MAtKbC,MAAQ,CACNC,YAAa,GACbC,YAAa,GACbC,cAAe,GACflB,aAAc,GACdQ,OAAQ,GACRW,WAAY,GACZC,eAAe,EACfC,eAAe,EACfC,iBAAiB,EACjBC,gBAAgB,EAChBC,WAAY,GACZC,SAAS,EACTC,UAAU,EACVd,YAAa,U,EASfnB,gBAAkB,SAAAD,GAChB,IAAImC,EAAUnC,EAAMoC,OAAOC,MAAMC,cACjC,EAAKC,SAAS,CAAEf,YAAaW,K,EAG/BtB,gBAAkB,SAAAb,GAChB,EAAKuC,SAAS,CAAEd,YAAY,iBAAD,OAAmBzB,EAAMoC,OAAOC,MAAhC,S,EAG7B3B,kBAAoB,SAAAV,GAClB,EAAKuC,SAAS,CAAEb,cAAc,GAAD,OAAK1B,EAAMoC,OAAOC,MAAlB,Q,EAG/BjC,iBAAmB,WACjB,IAA2B,IAAvB,EAAKmB,MAAMU,QAAkB,CAC/B,IAAIO,EAAK,YAAO,EAAKjB,MAAMI,YACvBc,EAAU,EAAKlB,MAAMC,YACzBgB,EAAME,KAAKD,GACX,EAAKF,SAAS,CACZ/B,aAAciC,EACdd,WAAYa,EACZZ,eAAe,EACfC,eAAe,EACfC,iBAAiB,M,EAKvBhB,iBAAmB,WACjB,IAEI6B,EAFQ,EAAKpB,MAAMf,aACX,EAAKe,MAAME,YAEvB,EAAKc,SAAS,CACZX,eAAe,EACfC,eAAe,EACfC,iBAAiB,EACjBtB,aAAcmC,K,EAIlBhC,mBAAqB,WACnB,IAAIO,EAAQ,EAAKK,MAAMf,aACvBU,GAAS,EAAKK,MAAMG,cACpB,IAAIkB,EAAc,EAAKrB,MAAMP,OAC7B4B,EAAYF,KAAKxB,GACjB,EAAKqB,SAAS,CACZT,iBAAiB,EACjBD,eAAe,EACfD,eAAe,EACfZ,OAAQ4B,EACRpB,YAAa,GACbC,YAAa,GACbjB,aAAc,GACdkB,cAAe,M,EAInBL,YAAc,SAAAF,GACZ,IAAI0B,EAAS,YAAO,EAAKtB,MAAMP,QAC3B8B,EAAa,YAAO,EAAKvB,MAAMI,YACnCkB,EAAUE,OAAO5B,EAAO,GACxB2B,EAAcC,OAAO5B,EAAO,GAC5B,EAAKoB,SAAS,CACZvB,OAAQ6B,EACRlB,WAAYmB,K,EAIhBE,iBAAmB,WACjB,IAAIC,EAAmBC,KAAKC,MAC1BD,KAAKE,SAAW,EAAK7B,MAAMI,WAAW0B,QAEpCC,EAAgB,EAAK/B,MAAMI,WAAWsB,GAC1C,EAAKV,SAAS,CACZP,WAAYsB,EACZvB,gBAAgB,EAChBE,SAAS,EACTb,YAAa,gB,EAIjBmC,YAAc,WAEZ,EAAKhB,SAAS,CACZvB,OAFgB,GAGhBe,gBAAgB,EAChBC,WAAY,GACZC,SAAS,EACTC,UAAU,EACVd,YAAa,Y,oFA9FXoC,KAAKjC,MAAMP,OAAOqC,QAAU,IAA6B,IAAxBG,KAAKjC,MAAMW,UAC9CsB,KAAKjB,SAAS,CAAEL,UAAU,M,+BAiGpB,IAAD,OACP,OACE,yBAAKvC,UAAU,aACb,iDACC6D,KAAKjC,MAAMU,QACV,4BAAQtC,UAAU,QAAQW,QAASkD,KAAKD,aAAxC,SAIAC,KAAKjC,MAAMK,eACT,kBAAC,EAAD,CACE3B,gBAAiBuD,KAAKvD,gBACtBG,iBAAkBoD,KAAKpD,mBAI5BoD,KAAKjC,MAAMM,eACV,kBAAC,EAAD,CACEhB,gBAAiB2C,KAAK3C,gBACtBC,iBAAkB0C,KAAK1C,mBAG1B0C,KAAKjC,MAAMO,iBACV,kBAAC,EAAD,CACEpB,kBAAmB8C,KAAK9C,kBACxBC,mBAAoB6C,KAAK7C,qBAG7B,kBAAC,EAAD,CAAcH,aAAcgD,KAAKjC,MAAMf,eACvC,kBAAC,EAAD,CACEQ,OAAQwC,KAAKjC,MAAMP,OACnBK,YAAamC,KAAKnC,YAClBD,YAAaoC,KAAKjC,MAAMH,cAGzBoC,KAAKjC,MAAMW,SACVsB,KAAKjC,MAAMQ,eACT,sCAAQyB,KAAKjC,MAAMS,WAAnB,UAEA,wBAAI1B,QAAS,kBAAM,EAAK0C,qBAAxB,0CAKF,sE,GAjKQS,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bdc49ecb.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../CSS/Submit.css\";\n\nconst NameInput = props => {\n  let handleEnter = event => {\n    if (event.key === \"Enter\") {\n      props.handleNameSubmit();\n    }\n  };\n\n  return (\n    <div>\n      <input\n        className=\"input\"\n        placeholder=\"Input Name Here\"\n        autoFocus\n        type=\"text\"\n        onChange={event => props.handleNameInput(event)}\n        onKeyDown={event => handleEnter(event)}\n      ></input>\n      <button className=\"Submit\" onClick={props.handleNameSubmit}>\n        Add Name\n      </button>\n    </div>\n  );\n};\n\nexport default NameInput;\n","import React from \"react\";\n\nconst CurrentOrder = props => {\n  return (\n    <div>\n      <h1>{props.currentOrder}</h1>\n    </div>\n  );\n};\n\nexport default CurrentOrder;\n","import React from \"react\";\nimport \"../CSS/Submit.css\";\n\nconst CoffeeInput = props => {\n  let handleEnter = event => {\n    if (event.key === \"Enter\") {\n      props.handleCoffeeSubmit();\n    }\n  };\n\n  return (\n    <div>\n      <input\n        className=\"input\"\n        placeholder=\"Input coffee Here\"\n        autoFocus\n        type=\"text\"\n        onChange={event => props.handleCoffeeInput(event)}\n        onKeyDown={event => handleEnter(event)}\n      ></input>\n      <button className=\"Submit\" onClick={props.handleCoffeeSubmit}>\n        Add Coffee\n      </button>\n    </div>\n  );\n};\n\nexport default CoffeeInput;\n","import React from \"react\";\nimport \"../CSS/Submit.css\";\n\nconst SizeInput = props => {\n  let handleEnter = event => {\n    if (event.key === \"Enter\") {\n      props.handleSizeSubmit();\n    }\n  };\n\n  return (\n    <div>\n      <input\n        className=\"input\"\n        placeholder=\"Input Size Here\"\n        autoFocus\n        type=\"text\"\n        onChange={event => props.handleSizeInput(event)}\n        onKeyDown={event => handleEnter(event)}\n      ></input>\n      <button className=\"Submit\" onClick={props.handleSizeSubmit}>\n        Add Size\n      </button>\n    </div>\n  );\n};\n\nexport default SizeInput;\n","import React from \"react\";\nimport \"../CSS/Submit.css\";\n\nconst CompOrders = props => {\n  return (\n    <div className=\"completed-orders\">\n      {props.orders.map((order, index) => {\n        return (\n          <div className=\"orders\">\n            <h2>{order}</h2>\n            <button\n              className={props.deleteClass}\n              onClick={() => props.orderDelete(index)}\n            >\n              x\n            </button>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CompOrders;\n","import React, { Component } from \"react\";\nimport \"./CSS/App.css\";\nimport NameInput from \"./components/NameInput\";\nimport CurrentOrder from \"./components/CurrentOrder\";\nimport CoffeeInput from \"./components/CoffeeInput\";\nimport SizeInput from \"./components/SizeInput\";\nimport CompOrders from \"./components/CompOrders\";\n\nclass App extends Component {\n  state = {\n    currentName: \"\",\n    currentSize: \"\",\n    currentCoffee: \"\",\n    currentOrder: \"\",\n    orders: [],\n    orderNames: [],\n    showNameInput: true,\n    showSizeInput: false,\n    showCoffeeInput: false,\n    randomNameShow: false,\n    randomName: \"\",\n    endGame: false,\n    roulette: false,\n    deleteClass: \"delete\"\n  };\n\n  componentDidUpdate() {\n    if (this.state.orders.length >= 2 && this.state.roulette === false) {\n      this.setState({ roulette: true });\n    }\n  }\n\n  handleNameInput = event => {\n    let capName = event.target.value.toUpperCase();\n    this.setState({ currentName: capName });\n  };\n\n  handleSizeInput = event => {\n    this.setState({ currentSize: ` would like a ${event.target.value}, ` });\n  };\n\n  handleCoffeeInput = event => {\n    this.setState({ currentCoffee: `${event.target.value}.` });\n  };\n\n  handleNameSubmit = () => {\n    if (this.state.endGame !== true) {\n      let names = [...this.state.orderNames];\n      let newName = this.state.currentName;\n      names.push(newName);\n      this.setState({\n        currentOrder: newName,\n        orderNames: names,\n        showNameInput: false,\n        showSizeInput: true,\n        showCoffeeInput: false\n      });\n    }\n  };\n\n  handleSizeSubmit = () => {\n    let order = this.state.currentOrder;\n    let cSize = this.state.currentSize;\n    let afterOrder = order + cSize;\n    this.setState({\n      showNameInput: false,\n      showSizeInput: false,\n      showCoffeeInput: true,\n      currentOrder: afterOrder\n    });\n  };\n\n  handleCoffeeSubmit = () => {\n    let order = this.state.currentOrder;\n    order += this.state.currentCoffee;\n    let ordersArray = this.state.orders;\n    ordersArray.push(order);\n    this.setState({\n      showCoffeeInput: false,\n      showSizeInput: false,\n      showNameInput: true,\n      orders: ordersArray,\n      currentName: \"\",\n      currentSize: \"\",\n      currentOrder: \"\",\n      currentCoffee: \"\"\n    });\n  };\n\n  orderDelete = index => {\n    let newOrders = [...this.state.orders];\n    let newOrderNames = [...this.state.orderNames];\n    newOrders.splice(index, 1);\n    newOrderNames.splice(index, 1);\n    this.setState({\n      orders: newOrders,\n      orderNames: newOrderNames\n    });\n  };\n\n  handleRandomName = () => {\n    let randomNameNumGen = Math.floor(\n      Math.random() * this.state.orderNames.length\n    );\n    let randomNameGen = this.state.orderNames[randomNameNumGen];\n    this.setState({\n      randomName: randomNameGen,\n      randomNameShow: true,\n      endGame: true,\n      deleteClass: \"hidedelete\"\n    });\n  };\n\n  handleReset = () => {\n    let resetOrders = [];\n    this.setState({\n      orders: resetOrders,\n      randomNameShow: false,\n      randomName: \"\",\n      endGame: false,\n      roulette: false,\n      deleteClass: \"delete\"\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>Who wants coffee?</h1>\n        {this.state.endGame ? (\n          <button className=\"Reset\" onClick={this.handleReset}>\n            Reset\n          </button>\n        ) : (\n          this.state.showNameInput && (\n            <NameInput\n              handleNameInput={this.handleNameInput}\n              handleNameSubmit={this.handleNameSubmit}\n            />\n          )\n        )}\n        {this.state.showSizeInput && (\n          <SizeInput\n            handleSizeInput={this.handleSizeInput}\n            handleSizeSubmit={this.handleSizeSubmit}\n          />\n        )}\n        {this.state.showCoffeeInput && (\n          <CoffeeInput\n            handleCoffeeInput={this.handleCoffeeInput}\n            handleCoffeeSubmit={this.handleCoffeeSubmit}\n          />\n        )}\n        <CurrentOrder currentOrder={this.state.currentOrder} />\n        <CompOrders\n          orders={this.state.orders}\n          orderDelete={this.orderDelete}\n          deleteClass={this.state.deleteClass}\n        />\n\n        {this.state.roulette ? (\n          this.state.randomNameShow ? (\n            <h3>{`${this.state.randomName} pays`}</h3>\n          ) : (\n            <h3 onClick={() => this.handleRandomName()}>\n              Click to end order and choose who pays\n            </h3>\n          )\n        ) : (\n          <h3>Add atleast 2 orders for roulette</h3>\n        )}\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}